// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using server.Data;
using server.Models.Domain.Enums;

#nullable disable

namespace server.Data.Migrations.Laberis
{
    [DbContext(typeof(LaberisDbContext))]
    [Migration("20250702180106_WorkflowStageUpdate")]
    partial class WorkflowStageUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "public", "annotation_type_enum", new[] { "bounding_box", "polygon", "polyline", "point", "text" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "public", "asset_status_enum", new[] { "pending_import", "imported", "import_error", "pending_processing", "processing", "processing_error", "ready_for_annotation", "annotation_in_progress", "annotated", "pending_review", "review_in_progress", "review_accepted", "review_rejected", "exported", "archived" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "public", "data_source_status_enum", new[] { "active", "inactive", "syncing", "error", "archived" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "public", "data_source_type_enum", new[] { "minio_bucket", "s3_bucket", "gsc_bucket", "azure_blob_storage", "local_directory", "database", "api", "other" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "public", "issue_status_enum", new[] { "open", "in_progress", "resolved", "closed", "reopened", "canceled" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "public", "issue_type_enum", new[] { "incorrect_annotation", "missing_annotation", "ambiguous_task", "asset_quality_issue", "guideline_inquiry", "other" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "public", "project_role_enum", new[] { "manager", "reviewer", "annotator", "viewer" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "public", "project_status_enum", new[] { "active", "archived", "read_only", "pending_deletion" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "public", "project_type_enum", new[] { "image_classification", "object_detection", "image_segmentation", "video_annotation", "text_annotation", "other" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "public", "task_event_type_enum", new[] { "task_created", "task_assigned", "task_unassigned", "stage_changed", "status_changed", "comment_added", "annotation_created", "annotation_updated", "annotation_deleted", "review_submitted", "issue_raised", "priority_changed", "due_date_changed", "task_completed", "task_archived", "task_suspended", "task_deferred", "task_reopened" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "public", "workflow_stage_type_enum", new[] { "annotation", "suspended", "deferred", "review", "requires_changes", "accepted" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "identity");
                });

            modelBuilder.Entity("server.Models.Domain.Annotation", b =>
                {
                    b.Property<long>("AnnotationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("annotation_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("AnnotationId"));

                    b.Property<AnnotationType>("AnnotationType")
                        .HasColumnType("public.annotation_type_enum")
                        .HasColumnName("annotation_type");

                    b.Property<string>("AnnotatorUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("annotator_user_id");

                    b.Property<int>("AssetId")
                        .HasColumnType("integer")
                        .HasColumnName("asset_id");

                    b.Property<double?>("ConfidenceScore")
                        .HasColumnType("double precision")
                        .HasColumnName("confidence_score");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("data");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsGroundTruth")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_ground_truth");

                    b.Property<bool>("IsPrediction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_prediction");

                    b.Property<int>("LabelId")
                        .HasColumnType("integer")
                        .HasColumnName("label_id");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<long?>("ParentAnnotationId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_annotation_id");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer")
                        .HasColumnName("task_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("version");

                    b.HasKey("AnnotationId");

                    b.HasIndex("AnnotatorUserId");

                    b.HasIndex("AssetId");

                    b.HasIndex("LabelId");

                    b.HasIndex("ParentAnnotationId");

                    b.HasIndex("TaskId");

                    b.ToTable("annotations", (string)null);
                });

            modelBuilder.Entity("server.Models.Domain.Asset", b =>
                {
                    b.Property<int>("AssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("asset_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AssetId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("DataSourceId")
                        .HasColumnType("integer")
                        .HasColumnName("data_source_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DurationMs")
                        .HasColumnType("integer")
                        .HasColumnName("duration_ms");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("external_id");

                    b.Property<string>("Filename")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("filename");

                    b.Property<int?>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<string>("Metadata")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<string>("MimeType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("mime_type");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<long?>("SizeBytes")
                        .HasColumnType("bigint")
                        .HasColumnName("size_bytes");

                    b.Property<AssetStatus>("Status")
                        .HasColumnType("public.asset_status_enum")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("width");

                    b.HasKey("AssetId");

                    b.HasIndex("DataSourceId");

                    b.HasIndex("ProjectId", "ExternalId")
                        .IsUnique();

                    b.ToTable("assets", (string)null);
                });

            modelBuilder.Entity("server.Models.Domain.DataSource", b =>
                {
                    b.Property<int>("DataSourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("data_source_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DataSourceId"));

                    b.Property<string>("ConnectionDetails")
                        .HasColumnType("jsonb")
                        .HasColumnName("connection_details");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_default");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<DataSourceType>("SourceType")
                        .HasColumnType("public.data_source_type_enum")
                        .HasColumnName("source_type");

                    b.Property<DataSourceStatus>("Status")
                        .HasColumnType("public.data_source_status_enum")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("DataSourceId");

                    b.HasIndex("ProjectId");

                    b.ToTable("data_sources", (string)null);
                });

            modelBuilder.Entity("server.Models.Domain.Issue", b =>
                {
                    b.Property<int>("IssueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("issue_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IssueId"));

                    b.Property<long?>("AnnotationId")
                        .HasColumnType("bigint")
                        .HasColumnName("annotation_id");

                    b.Property<int>("AssetId")
                        .HasColumnType("integer")
                        .HasColumnName("asset_id");

                    b.Property<string>("AssignedToUserId")
                        .HasColumnType("text")
                        .HasColumnName("assigned_to_user_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<IssueType?>("IssueType")
                        .HasColumnType("public.issue_type_enum")
                        .HasColumnName("issue_type");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("priority");

                    b.Property<string>("ReportedByUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reported_by_user_id");

                    b.Property<string>("ResolutionDetails")
                        .HasColumnType("text")
                        .HasColumnName("resolution_details");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("resolved_at");

                    b.Property<IssueStatus>("Status")
                        .HasColumnType("public.issue_status_enum")
                        .HasColumnName("status");

                    b.Property<int?>("TaskId")
                        .HasColumnType("integer")
                        .HasColumnName("task_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("IssueId");

                    b.HasIndex("AnnotationId");

                    b.HasIndex("AssetId");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("ReportedByUserId");

                    b.HasIndex("TaskId");

                    b.ToTable("issues", (string)null);
                });

            modelBuilder.Entity("server.Models.Domain.Label", b =>
                {
                    b.Property<int>("LabelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("label_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LabelId"));

                    b.Property<string>("Color")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("LabelSchemeId")
                        .HasColumnType("integer")
                        .HasColumnName("label_scheme_id");

                    b.Property<string>("Metadata")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("LabelId");

                    b.HasIndex("LabelSchemeId", "Name")
                        .IsUnique();

                    b.ToTable("labels", (string)null);
                });

            modelBuilder.Entity("server.Models.Domain.LabelScheme", b =>
                {
                    b.Property<int>("LabelSchemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("label_scheme_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LabelSchemeId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_default");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("LabelSchemeId");

                    b.HasIndex("ProjectId", "Name")
                        .IsUnique();

                    b.ToTable("label_schemes", (string)null);
                });

            modelBuilder.Entity("server.Models.Domain.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProjectId"));

                    b.Property<string>("AnnotationGuidelinesUrl")
                        .HasColumnType("text")
                        .HasColumnName("annotation_guidelines_url");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text")
                        .HasColumnName("owner_id");

                    b.Property<ProjectType>("ProjectType")
                        .HasColumnType("public.project_type_enum")
                        .HasColumnName("project_type");

                    b.Property<ProjectStatus>("Status")
                        .HasColumnType("public.project_status_enum")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("ProjectId");

                    b.HasIndex("OwnerId");

                    b.ToTable("projects", (string)null);
                });

            modelBuilder.Entity("server.Models.Domain.ProjectInvitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("InvitationToken")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("invitation_token");

                    b.Property<string>("InvitedByUserId")
                        .HasColumnType("text")
                        .HasColumnName("invited_by_user_id");

                    b.Property<bool>("IsAccepted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_accepted");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<ProjectRole>("Role")
                        .HasColumnType("public.project_role_enum")
                        .HasColumnName("role");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("InvitationToken")
                        .IsUnique();

                    b.HasIndex("InvitedByUserId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("Email", "ProjectId");

                    b.ToTable("project_invitations", (string)null);
                });

            modelBuilder.Entity("server.Models.Domain.ProjectMember", b =>
                {
                    b.Property<int>("ProjectMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("project_member_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProjectMemberId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("InvitedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("invited_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("JoinedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("joined_at");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<ProjectRole>("Role")
                        .HasColumnType("public.project_role_enum")
                        .HasColumnName("role");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("ProjectMemberId");

                    b.HasIndex("UserId");

                    b.HasIndex("ProjectId", "UserId")
                        .IsUnique();

                    b.ToTable("project_members", (string)null);
                });

            modelBuilder.Entity("server.Models.Domain.Task", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("task_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TaskId"));

                    b.Property<DateTime?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("archived_at");

                    b.Property<int>("AssetId")
                        .HasColumnType("integer")
                        .HasColumnName("asset_id");

                    b.Property<string>("AssignedToUserId")
                        .HasColumnType("text")
                        .HasColumnName("assigned_to_user_id");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CurrentWorkflowStageId")
                        .HasColumnType("integer")
                        .HasColumnName("current_workflow_stage_id");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("due_date");

                    b.Property<string>("LastWorkedOnByUserId")
                        .HasColumnType("text")
                        .HasColumnName("last_worked_on_by_user_id");

                    b.Property<string>("Metadata")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("priority");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("WorkflowId")
                        .HasColumnType("integer")
                        .HasColumnName("workflow_id");

                    b.HasKey("TaskId");

                    b.HasIndex("AssetId");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("CurrentWorkflowStageId");

                    b.HasIndex("LastWorkedOnByUserId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("WorkflowId");

                    b.ToTable("tasks", (string)null);
                });

            modelBuilder.Entity("server.Models.Domain.TaskEvent", b =>
                {
                    b.Property<long>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("event_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("EventId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Details")
                        .HasColumnType("jsonb")
                        .HasColumnName("details");

                    b.Property<TaskEventType>("EventType")
                        .HasColumnType("public.task_event_type_enum")
                        .HasColumnName("event_type");

                    b.Property<int?>("FromWorkflowStageId")
                        .HasColumnType("integer")
                        .HasColumnName("from_workflow_stage_id");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer")
                        .HasColumnName("task_id");

                    b.Property<int?>("ToWorkflowStageId")
                        .HasColumnType("integer")
                        .HasColumnName("to_workflow_stage_id");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("EventId");

                    b.HasIndex("FromWorkflowStageId");

                    b.HasIndex("TaskId");

                    b.HasIndex("ToWorkflowStageId");

                    b.HasIndex("UserId");

                    b.ToTable("task_events", (string)null);
                });

            modelBuilder.Entity("server.Models.Domain.Workflow", b =>
                {
                    b.Property<int>("WorkflowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("workflow_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WorkflowId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("WorkflowId");

                    b.HasIndex("ProjectId", "Name")
                        .IsUnique();

                    b.ToTable("workflows", (string)null);
                });

            modelBuilder.Entity("server.Models.Domain.WorkflowStage", b =>
                {
                    b.Property<int>("WorkflowStageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("workflow_stage_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WorkflowStageId"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("InputDataSourceId")
                        .HasColumnType("integer")
                        .HasColumnName("input_data_source_id");

                    b.Property<bool>("IsFinalStage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_final_stage");

                    b.Property<bool>("IsInitialStage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_initial_stage");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int>("StageOrder")
                        .HasColumnType("integer")
                        .HasColumnName("stage_order");

                    b.Property<WorkflowStageType?>("StageType")
                        .HasColumnType("public.workflow_stage_type_enum")
                        .HasColumnName("stage_type");

                    b.Property<int?>("TargetDataSourceId")
                        .HasColumnType("integer")
                        .HasColumnName("target_data_source_id");

                    b.Property<string>("UiConfiguration")
                        .HasColumnType("jsonb")
                        .HasColumnName("ui_configuration");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("WorkflowId")
                        .HasColumnType("integer")
                        .HasColumnName("workflow_id");

                    b.HasKey("WorkflowStageId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("InputDataSourceId");

                    b.HasIndex("TargetDataSourceId");

                    b.HasIndex("WorkflowId", "Name")
                        .IsUnique();

                    b.HasIndex("WorkflowId", "StageOrder")
                        .IsUnique();

                    b.ToTable("workflow_stages", (string)null);
                });

            modelBuilder.Entity("server.Models.Domain.WorkflowStageAssignment", b =>
                {
                    b.Property<int>("WorkflowStageAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("workflow_stage_assignment_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WorkflowStageAssignmentId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("ProjectMemberId")
                        .HasColumnType("integer")
                        .HasColumnName("project_member_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("WorkflowStageId")
                        .HasColumnType("integer")
                        .HasColumnName("workflow_stage_id");

                    b.HasKey("WorkflowStageAssignmentId");

                    b.HasIndex("ProjectMemberId");

                    b.HasIndex("WorkflowStageId", "ProjectMemberId")
                        .IsUnique();

                    b.ToTable("workflow_stage_assignments", (string)null);
                });

            modelBuilder.Entity("server.Models.Domain.WorkflowStageConnection", b =>
                {
                    b.Property<int>("WorkflowStageConnectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("workflow_stage_connection_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WorkflowStageConnectionId"));

                    b.Property<string>("Condition")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("condition");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("FromStageId")
                        .HasColumnType("integer")
                        .HasColumnName("from_stage_id");

                    b.Property<int>("ToStageId")
                        .HasColumnType("integer")
                        .HasColumnName("to_stage_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("WorkflowStageConnectionId");

                    b.HasIndex("ToStageId");

                    b.HasIndex("FromStageId", "ToStageId", "Condition")
                        .IsUnique();

                    b.ToTable("workflow_stage_connections", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("server.Models.Domain.Annotation", b =>
                {
                    b.HasOne("ApplicationUser", "AnnotatorUser")
                        .WithMany()
                        .HasForeignKey("AnnotatorUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("server.Models.Domain.Asset", "Asset")
                        .WithMany("Annotations")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Domain.Label", "Label")
                        .WithMany("Annotations")
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("server.Models.Domain.Annotation", "ParentAnnotation")
                        .WithMany("ChildAnnotations")
                        .HasForeignKey("ParentAnnotationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("server.Models.Domain.Task", "Task")
                        .WithMany("Annotations")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnnotatorUser");

                    b.Navigation("Asset");

                    b.Navigation("Label");

                    b.Navigation("ParentAnnotation");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("server.Models.Domain.Asset", b =>
                {
                    b.HasOne("server.Models.Domain.DataSource", "DataSource")
                        .WithMany("Assets")
                        .HasForeignKey("DataSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Domain.Project", "Project")
                        .WithMany("Assets")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataSource");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("server.Models.Domain.DataSource", b =>
                {
                    b.HasOne("server.Models.Domain.Project", "Project")
                        .WithMany("DataSources")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("server.Models.Domain.Issue", b =>
                {
                    b.HasOne("server.Models.Domain.Annotation", "Annotation")
                        .WithMany("Issues")
                        .HasForeignKey("AnnotationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("server.Models.Domain.Asset", "Asset")
                        .WithMany("Issues")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "AssignedToUser")
                        .WithMany()
                        .HasForeignKey("AssignedToUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ApplicationUser", "ReportedByUser")
                        .WithMany()
                        .HasForeignKey("ReportedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("server.Models.Domain.Task", "Task")
                        .WithMany("Issues")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Annotation");

                    b.Navigation("Asset");

                    b.Navigation("AssignedToUser");

                    b.Navigation("ReportedByUser");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("server.Models.Domain.Label", b =>
                {
                    b.HasOne("server.Models.Domain.LabelScheme", "LabelScheme")
                        .WithMany("Labels")
                        .HasForeignKey("LabelSchemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LabelScheme");
                });

            modelBuilder.Entity("server.Models.Domain.LabelScheme", b =>
                {
                    b.HasOne("server.Models.Domain.Project", "Project")
                        .WithMany("LabelSchemes")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("server.Models.Domain.Project", b =>
                {
                    b.HasOne("ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("server.Models.Domain.ProjectInvitation", b =>
                {
                    b.HasOne("ApplicationUser", "InvitedByUser")
                        .WithMany()
                        .HasForeignKey("InvitedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("server.Models.Domain.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvitedByUser");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("server.Models.Domain.ProjectMember", b =>
                {
                    b.HasOne("server.Models.Domain.Project", "Project")
                        .WithMany("ProjectMembers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.Models.Domain.Task", b =>
                {
                    b.HasOne("server.Models.Domain.Asset", "Asset")
                        .WithMany("Tasks")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "AssignedToUser")
                        .WithMany()
                        .HasForeignKey("AssignedToUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("server.Models.Domain.WorkflowStage", "CurrentWorkflowStage")
                        .WithMany("TasksAtThisStage")
                        .HasForeignKey("CurrentWorkflowStageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "LastWorkedOnByUser")
                        .WithMany()
                        .HasForeignKey("LastWorkedOnByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("server.Models.Domain.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Domain.Workflow", "Workflow")
                        .WithMany("Tasks")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("AssignedToUser");

                    b.Navigation("CurrentWorkflowStage");

                    b.Navigation("LastWorkedOnByUser");

                    b.Navigation("Project");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("server.Models.Domain.TaskEvent", b =>
                {
                    b.HasOne("server.Models.Domain.WorkflowStage", "FromWorkflowStage")
                        .WithMany()
                        .HasForeignKey("FromWorkflowStageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("server.Models.Domain.Task", "Task")
                        .WithMany("TaskEvents")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Domain.WorkflowStage", "ToWorkflowStage")
                        .WithMany()
                        .HasForeignKey("ToWorkflowStageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("FromWorkflowStage");

                    b.Navigation("Task");

                    b.Navigation("ToWorkflowStage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.Models.Domain.Workflow", b =>
                {
                    b.HasOne("server.Models.Domain.Project", "Project")
                        .WithMany("Workflows")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("server.Models.Domain.WorkflowStage", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany("WorkflowStages")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("server.Models.Domain.DataSource", "InputDataSource")
                        .WithMany()
                        .HasForeignKey("InputDataSourceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("server.Models.Domain.DataSource", "TargetDataSource")
                        .WithMany()
                        .HasForeignKey("TargetDataSourceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("server.Models.Domain.Workflow", "Workflow")
                        .WithMany("WorkflowStages")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InputDataSource");

                    b.Navigation("TargetDataSource");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("server.Models.Domain.WorkflowStageAssignment", b =>
                {
                    b.HasOne("server.Models.Domain.ProjectMember", "ProjectMember")
                        .WithMany("WorkflowStageAssignments")
                        .HasForeignKey("ProjectMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Domain.WorkflowStage", "WorkflowStage")
                        .WithMany("StageAssignments")
                        .HasForeignKey("WorkflowStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectMember");

                    b.Navigation("WorkflowStage");
                });

            modelBuilder.Entity("server.Models.Domain.WorkflowStageConnection", b =>
                {
                    b.HasOne("server.Models.Domain.WorkflowStage", "FromStage")
                        .WithMany("OutgoingConnections")
                        .HasForeignKey("FromStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Domain.WorkflowStage", "ToStage")
                        .WithMany("IncomingConnections")
                        .HasForeignKey("ToStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromStage");

                    b.Navigation("ToStage");
                });

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Navigation("WorkflowStages");
                });

            modelBuilder.Entity("server.Models.Domain.Annotation", b =>
                {
                    b.Navigation("ChildAnnotations");

                    b.Navigation("Issues");
                });

            modelBuilder.Entity("server.Models.Domain.Asset", b =>
                {
                    b.Navigation("Annotations");

                    b.Navigation("Issues");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("server.Models.Domain.DataSource", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("server.Models.Domain.Label", b =>
                {
                    b.Navigation("Annotations");
                });

            modelBuilder.Entity("server.Models.Domain.LabelScheme", b =>
                {
                    b.Navigation("Labels");
                });

            modelBuilder.Entity("server.Models.Domain.Project", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("DataSources");

                    b.Navigation("LabelSchemes");

                    b.Navigation("ProjectMembers");

                    b.Navigation("Workflows");
                });

            modelBuilder.Entity("server.Models.Domain.ProjectMember", b =>
                {
                    b.Navigation("WorkflowStageAssignments");
                });

            modelBuilder.Entity("server.Models.Domain.Task", b =>
                {
                    b.Navigation("Annotations");

                    b.Navigation("Issues");

                    b.Navigation("TaskEvents");
                });

            modelBuilder.Entity("server.Models.Domain.Workflow", b =>
                {
                    b.Navigation("Tasks");

                    b.Navigation("WorkflowStages");
                });

            modelBuilder.Entity("server.Models.Domain.WorkflowStage", b =>
                {
                    b.Navigation("IncomingConnections");

                    b.Navigation("OutgoingConnections");

                    b.Navigation("StageAssignments");

                    b.Navigation("TasksAtThisStage");
                });
#pragma warning restore 612, 618
        }
    }
}
